[{"/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/pages/user-project/user-project.component.jsx":"1","/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/components/form-textbox/form-textbox.component.jsx":"2","/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/reportWebVitals.js":"3","/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/pages/search-page/search-page.component.jsx":"4","/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/components/card/card.component.jsx":"5","/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/components/form-input/form-input.component.jsx":"6","/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/components/skill-card/skill-card.component.jsx":"7","/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/components/bookmark-card/bookmark-card.component.jsx":"8"},{"size":18411,"mtime":1614540064123,"results":"9","hashOfConfig":"10"},{"size":463,"mtime":1612274457260,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1612274457268,"results":"12","hashOfConfig":"10"},{"size":8547,"mtime":1614519702655,"results":"13","hashOfConfig":"10"},{"size":162,"mtime":1612274457260,"results":"14","hashOfConfig":"10"},{"size":392,"mtime":1612274457260,"results":"15","hashOfConfig":"10"},{"size":404,"mtime":1612274457264,"results":"16","hashOfConfig":"10"},{"size":348,"mtime":1612274457260,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"pzfun9",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/pages/user-project/user-project.component.jsx",["35","36","37","38","39","40"],"import React from \"react\";\nimport \"./user-project.style.scss\";\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport Select from \"react-select\";\n\nimport TextCard from \"../../components/text-card/text-card.component\";\nimport CustomButton from \"../../components/custom-button/custom-button.component\";\nimport CardGrid from \"../../components/cardgrid/cardgrid.component\";\nimport CardList from \"../../components/cardlist/cardlist.component\";\nimport Card from \"../../components/card/card.component\";\nimport ProjectCardView from \"../../components/projectcardview/projectcardview.component\";\nimport VerticalScroll from \"../../components/vertical-scroll/vertical-scroll.component\";\nimport SkillCard from \"../../components/skill-card/skill-card.component\";\nimport FormInput from \"../../components/form-input/form-input.component\";\nimport ProjectEditSkill from \"../../components/project-edit-skill/project-edit-skill.component\";\nimport CancelButton from \"../../components/cancel-button/cancel-button.component\";\nimport FormTextbox from \"../../components/form-textbox/form-textbox.component\";\nimport FormTextArea from \"../../components/form-textarea/form-textarea.component\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"../../constant\";\n\nconst customStyles = {\n  menu: (provided, state) => ({\n    ...provided,\n    width: state.selectProps.width,\n    borderBottom: \"1px dotted pink\",\n    color: state.selectProps.menuColor,\n    padding: 20,\n  }),\n\n  control: (_, { selectProps: { width } }) => ({\n    width: width,\n  }),\n\n  singleValue: (provided, state) => {\n    const opacity = state.isDisabled ? 0.5 : 1;\n    const transition = \"opacity 300ms\";\n\n    return { ...provided, opacity, transition };\n  },\n};\n\nclass UserProject extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      isAddProject: false,\n      isEditProject: false,\n      editProjectKey: null,\n      tempSkill: \"\",\n      newProjectTitle: \"\",\n      newProjectDescription: \"\",\n      newOpenings: \"\",\n      newProjectSkills: [],\n      selectedOption: null,\n      github_projects: [\n        { value: \"project-1\", label: \"project-1\" },\n        { value: \"project-2\", label: \"project-2\" },\n        { value: \"project-3\", label: \"project-3\" },\n        { value: \"project-4\", label: \"project-4\" },\n        { value: \"project-5\", label: \"project-5\" },\n        { value: \"project-6\", label: \"project-6\" },\n        { value: \"project-7\", label: \"project-7\" },\n      ],\n      projects: [],\n    };\n  }\n  async componentDidMount() {\n    const response = await axios({\n      method: \"GET\",\n      url: `${BASE_URL}/fetch-project-list`,\n      withCredentials: true\n    })\n    this.setState({\n      \"github_projects\": response.data\n    })\n    const list_project = await axios({\n      method: \"get\",\n      url: `${BASE_URL}/list-project`,\n      withCredentials: true,\n    })\n    this.setState({\n      \"projects\": list_project.data\n    })\n  }\n  async save_details() {\n    const response = await axios({\n      method: \"POST\",\n      url: `${BASE_URL}/project`,\n      data: {\n        \"projectTitle\": this.state.newProjectTitle,\n        \"projectDescription\": this.state.newProjectDescription,\n        \"projectSkills\": this.state.newProjectSkills,\n        \"projectOpenings\": this.state.newOpenings,\n      },\n      withCredentials: true\n    })\n    this.setState({\n      isAddProject: false,\n      projects: this.state.projects,\n      newProjectTitle: \"\",\n      newProjectDescription: \"\",\n      newProjectSkills: [],\n      newOpenings: \"\",\n    });\n    const list_project = await axios({\n      method: \"get\",\n      url: `${BASE_URL}/list-project`,\n      withCredentials: true,\n    })\n    this.setState({\n      \"projects\": list_project.data\n    })\n    this.successNotification();\n  }\n  async update_details(id) {\n    const response = await axios({\n      method: \"PUT\",\n      url: `${BASE_URL}/project`,\n      data: this.state.projects[id],\n      withCredentials: true\n    })\n    this.setState({ \"isEditProject\": false })\n    this.successNotification();\n  }\n  async remove_details(id) {\n    console.log(this.state.projects[id][\"_id\"])\n    const response = await axios({\n      method: \"DELETE\",\n      url: `${BASE_URL}/project`,\n      data: {\n        \"_id\": this.state.projects[id][\"_id\"],\n      },\n      withCredentials: true\n    })\n    const list_project = await axios({\n      method: \"get\",\n      url: `${BASE_URL}/list-project`,\n      withCredentials: true,\n    })\n    this.setState({\n      \"projects\": list_project.data\n    })\n    this.removeNotification()\n  }\n\n  resetKey() {\n    this.state.projects.forEach((project, i) => {\n      project.key = i + 1;\n    });\n  }\n\n  removeProject = (id) => {\n    this.setState({\n      projects: this.state.projects.filter((project) => {\n        return project.key !== id;\n      }),\n    });\n  };\n\n  addSkill = (id) => {\n    this.state.projects[id].projectSkills.unshift(this.state.tempSkill);\n    this.setState(({ projects }) => ({\n      projects: [\n        ...projects.slice(0, id),\n        {\n          ...projects[id],\n          projectSkills: this.state.projects[id].projectSkills,\n        },\n        ...projects.slice(id + 1),\n      ],\n      tempSkill: \"\",\n    }));\n  };\n\n  removeSkill = (remove_skill, id) => {\n    this.setState(({ projects }) => ({\n      projects: [\n        ...projects.slice(0, id),\n        {\n          ...projects[id],\n          projectSkills: this.state.projects[id].projectSkills.filter((skill) => {\n            return skill !== remove_skill;\n          }),\n        },\n        ...projects.slice(id + 1),\n      ],\n    }));\n  };\n\n  editProjectDetails = (id) => {\n    return (\n      <div className=\"edit-project-section\">\n        <br />\n        <CardGrid gridColumn=\"1fr 1fr\">\n          <Card>\n            <VerticalScroll height=\"500px\">\n              <div className=\"title-section\">\n                <div className=\"title-card\">\n                  <Card>\n                    <h3>Title</h3>\n                  </Card>\n                </div>\n                <div className=\"title-input\">\n                  <FormInput\n                    placeholder=\"Enter Title\"\n                    value={this.state.projects[id].projectTitle}\n                  // onChange={(e) => {\n                  //   this.setState(({ projects }) => ({\n                  //     projects: [\n                  //       ...projects.slice(0, id),\n                  //       {\n                  //         ...projects[id],\n                  //         projectTitle: e.target.value,\n                  //       },\n                  //       ...projects.slice(id + 1),\n                  //     ],\n                  //   }));\n                  // }}\n                  />\n                </div>\n              </div>\n              <br />\n              <br />\n              <div className=\"discription-section\">\n                <div className=\"discription-card\">\n                  <Card>\n                    <h3>Description</h3>\n                  </Card>\n                </div>\n                <div className=\"discription-input\">\n                  <FormTextArea\n                    placeholder=\"Enter Description\"\n                    value={this.state.projects[id].projectDescription}\n                    onChange={(e) => {\n                      this.setState(({ projects }) => ({\n                        projects: [\n                          ...projects.slice(0, id),\n                          {\n                            ...projects[id],\n                            projectDescription: e.target.value,\n                          },\n                          ...projects.slice(id + 1),\n                        ],\n                      }));\n                    }}\n                  />\n                </div>\n              </div>\n              <br />\n              <br />\n              <div className=\"opening-section\">\n                <div className=\"opening-card\">\n                  <Card>\n                    <h3>Openings</h3>\n                  </Card>\n                </div>\n                <div className=\"opening-input\">\n                  <FormInput\n                    placeholder=\"Enter Project Opening\"\n                    value={this.state.projects[id].projectOpenings}\n                    onChange={(e) => {\n                      this.setState(({ projects }) => ({\n                        projects: [\n                          ...projects.slice(0, id),\n                          {\n                            ...projects[id],\n                            projectOpenings: e.target.value,\n                          },\n                          ...projects.slice(id + 1),\n                        ],\n                      }));\n                    }}\n                  />\n                </div>\n              </div>\n            </VerticalScroll>\n          </Card>\n          <Card>\n            <h2 className=\"inner-header\">Required Skill</h2>\n            <div className=\"add-new-skill\">\n              <div className=\"add-new-skill-input\">\n                <FormInput\n                  placeholder=\"Skill\"\n                  value={this.state.tempSkill}\n                  onChange={(e) => {\n                    this.setState({ tempSkill: e.target.value });\n                  }}\n                />\n              </div>\n              <CustomButton\n                title=\"Add Skill\"\n                onClick={() => this.addSkill(id)}\n              />\n            </div>\n            <br />\n            <br />\n            <div className=\"user-project-edit-skill\">\n              <VerticalScroll height=\"300px\">\n                <CardGrid gridColumn=\"1fr 1fr 1fr\">\n                  {this.state.projects[id].projectSkills.map((skill) => {\n                    return (\n                      <ProjectEditSkill skill={skill}>\n                        <CancelButton\n                          onClick={() => this.removeSkill(skill, id)}\n                        />\n                      </ProjectEditSkill>\n                    );\n                  })}\n                </CardGrid>\n              </VerticalScroll>\n            </div>\n          </Card>\n        </CardGrid>\n        <br />\n        <div className=\"custom-save\">\n          <CustomButton\n            title=\"Save Details\"\n            onClick={() => {\n              this.update_details(id)\n            }}\n          />\n        </div>\n        <br />\n      </div>\n    );\n  };\n\n  selectProject = (selectedOption) => {\n    this.setState({ newProjectTitle: selectedOption.value });\n  };\n\n  addNewProject = () => {\n    return (\n      <div className=\"add-project-section\">\n        <br />\n        <CardGrid gridColumn=\"1fr 1fr\">\n          <Card>\n            <VerticalScroll height=\"500px\">\n              <div className=\"title-section\">\n                <div className=\"title-card\">\n                  <Card>\n                    <h3>Title</h3>\n                  </Card>\n                </div>\n                <Select\n                  className=\"dropdown\"\n                  options={this.state.github_projects}\n                  onChange={this.selectProject}\n                  placeholder=\"Select Project\"\n                  styles={customStyles}\n                />\n              </div>\n              <br />\n              <br />\n              <div className=\"discription-section\">\n                <div className=\"discription-card\">\n                  <Card>\n                    <h3>Description</h3>\n                  </Card>\n                </div>\n                <div className=\"discription-input\">\n                  <FormTextArea\n                    placeholder=\"Enter Discription\"\n                    value={this.state.newProjectDescription}\n                    onChange={(e) => {\n                      this.setState({ newProjectDescription: e.target.value });\n                    }}\n                  />\n                </div>\n              </div>\n              <br />\n              <br />\n              <div className=\"opening-section\">\n                <div className=\"opening-card\">\n                  <Card>\n                    <h3>Openings</h3>\n                  </Card>\n                </div>\n                <div className=\"opening-input\">\n                  <FormInput\n                    placeholder=\"Openings\"\n                    value={this.state.newOpenings}\n                    onChange={(e) => {\n                      this.setState({ newOpenings: e.target.value });\n                    }}\n                  />\n                </div>\n              </div>\n            </VerticalScroll>\n          </Card>\n          <Card>\n            <h2 className=\"inner-header\">Required Skill</h2>\n            <div className=\"add-new-skill\">\n              <div className=\"add-new-skill-input\">\n                <FormInput\n                  placeholder=\"Skill\"\n                  value={this.state.tempSkill}\n                  onChange={(e) => {\n                    this.setState({ tempSkill: e.target.value });\n                  }}\n                />\n              </div>\n              <CustomButton\n                title=\"Add Skill\"\n                onClick={() => {\n                  this.state.newProjectSkills.unshift(this.state.tempSkill);\n                  this.setState({\n                    newProjectSkills: this.state.newProjectSkills,\n                    tempSkill: \"\",\n                  });\n                }}\n              />\n            </div>\n            <br />\n            <br />\n            <div className=\"user-project-edit-skill\">\n              <VerticalScroll height=\"300px\">\n                <CardGrid gridColumn=\"1fr 1fr 1fr\">\n                  {this.state.newProjectSkills.map((skill) => {\n                    return (\n                      <ProjectEditSkill skill={skill}>\n                        <CancelButton\n                          onClick={() => {\n                            this.setState({\n                              newProjectSkills: this.state.newProjectSkills.filter(\n                                (newSkill) => {\n                                  return newSkill !== skill;\n                                }\n                              ),\n                            });\n                          }}\n                        />\n                      </ProjectEditSkill>\n                    );\n                  })}\n                </CardGrid>\n              </VerticalScroll>\n            </div>\n          </Card>\n        </CardGrid>\n        <br />\n        <div className=\"add-remove-project\">\n          <CardGrid gridColumn=\"1fr 1fr\">\n            <div className=\"custom-save\">\n              <CustomButton\n                title=\"Save Details\"\n                onClick={() => { this.save_details() }}\n              />\n            </div>\n            <div className=\"discard-save\">\n              <CustomButton\n                title=\"Discard Project\"\n                onClick={() => {\n                  this.setState({\n                    isAddProject: false,\n                    newProjectTitle: \"\",\n                    newProjectDescription: \"\",\n                    newProjectSkills: [],\n                    newOpenings: \"\",\n                  });\n                  this.discardNotification();\n                }}\n              />\n            </div>\n            <br />\n          </CardGrid>\n        </div>\n      </div>\n    );\n  };\n\n  renderProjects() {\n    return (\n      <div className=\"projects-section\">\n        <VerticalScroll height=\"600px\">\n          <CardList>\n            {\n              (console.log(this.state),\n                this.state.projects.map((project, project_id) => (\n                  <ProjectCardView\n                    projectTitle={project.projectTitle}\n                    projectDescription={project.projectDescription}\n                    projectSkill={project.projectSkills}\n                    projectOpening={project.projectOpenings}\n                  >\n                    <CardGrid gridColumn=\"1fr 1fr\">\n                      <CustomButton\n                        title=\"Edit Details\"\n                        onClick={() => (\n                          this.resetKey(),\n                          this.setState({\n                            isEditProject: true,\n                            editProjectKey: project.key,\n                          })\n                        )}\n                      />\n                      <CustomButton\n                        title=\"Remove Project\"\n                        onClick={() => {\n                          this.resetKey();\n                          this.remove_details(project_id)\n                        }\n\n                          // this.removeProject(project.key),\n                          // this.removeNotification()\n                        }\n                      />\n                    </CardGrid>\n                  </ProjectCardView>\n                )))\n            }\n          </CardList>\n        </VerticalScroll>\n      </div>\n    );\n  }\n\n  renderChoice() {\n    if (this.state.isEditProject) {\n      return this.editProjectDetails(this.state.editProjectKey - 1);\n    } else {\n      if (this.state.isAddProject) {\n        return this.addNewProject();\n      } else {\n        return this.renderProjects();\n      }\n    }\n  }\n\n  successNotification() {\n    toast.success(\"Project Successfully Saved.\");\n  }\n\n  discardNotification() {\n    toast.warning(\"Project Details Discard.\");\n  }\n\n  removeNotification() {\n    toast.error(\"Project Removed.\");\n  }\n\n  renderMainButton() {\n    if (this.state.isEditProject) {\n      return (\n        <CustomButton\n          title=\"Save Details\"\n          onClick={() => {\n            this.setState({ isEditProject: false });\n            this.successNotification();\n          }}\n        />\n      );\n    } else {\n      if (this.state.isAddProject) {\n        <CustomButton\n          title=\"Save Details\"\n          onClick={() => {\n            this.setState({ isAddProject: false });\n            this.successNotification();\n          }}\n        />;\n      } else {\n        return (\n          <CustomButton\n            title=\"Add Project\"\n            onClick={() => {\n              this.setState({ isAddProject: true });\n            }}\n          />\n        );\n      }\n    }\n  }\n\n  render() {\n    toast.configure();\n    return (\n      <div className=\"user-project\">\n        <div className=\"project-header\">\n          <TextCard text=\"Projects\" />\n          {this.renderMainButton()}\n        </div>\n        <br />\n        <br />\n        <Card>{this.renderChoice()}</Card>\n      </div>\n    );\n  }\n}\n\nexport default UserProject;\n","/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/components/form-textbox/form-textbox.component.jsx",[],"/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/reportWebVitals.js",[],"/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/pages/search-page/search-page.component.jsx",["41","42","43","44","45"],"/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/components/card/card.component.jsx",[],"/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/components/form-input/form-input.component.jsx",[],"/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/components/skill-card/skill-card.component.jsx",["46"],"/home/harsh/Desktop/Docker+gitConnect/gitConnetDjangoVerison/gitconnet/src/components/bookmark-card/bookmark-card.component.jsx",[],{"ruleId":"47","severity":1,"message":"48","line":16,"column":8,"nodeType":"49","messageId":"50","endLine":16,"endColumn":17},{"ruleId":"47","severity":1,"message":"51","line":20,"column":8,"nodeType":"49","messageId":"50","endLine":20,"endColumn":19},{"ruleId":"47","severity":1,"message":"52","line":91,"column":11,"nodeType":"49","messageId":"50","endLine":91,"endColumn":19},{"ruleId":"47","severity":1,"message":"52","line":121,"column":11,"nodeType":"49","messageId":"50","endLine":121,"endColumn":19},{"ruleId":"47","severity":1,"message":"52","line":132,"column":11,"nodeType":"49","messageId":"50","endLine":132,"endColumn":19},{"ruleId":"53","severity":1,"message":"54","line":496,"column":42,"nodeType":"55","messageId":"56","endLine":496,"endColumn":43},{"ruleId":"53","severity":1,"message":"54","line":107,"column":16,"nodeType":"55","messageId":"56","endLine":107,"endColumn":17},{"ruleId":"53","severity":1,"message":"54","line":128,"column":16,"nodeType":"55","messageId":"56","endLine":128,"endColumn":17},{"ruleId":"53","severity":1,"message":"54","line":152,"column":16,"nodeType":"55","messageId":"56","endLine":152,"endColumn":17},{"ruleId":"53","severity":1,"message":"54","line":171,"column":16,"nodeType":"55","messageId":"56","endLine":171,"endColumn":17},{"ruleId":"57","severity":1,"message":"58","line":219,"column":59,"nodeType":"59","messageId":"60","endLine":219,"endColumn":61},{"ruleId":"47","severity":1,"message":"61","line":4,"column":8,"nodeType":"49","messageId":"50","endLine":4,"endColumn":20},"no-unused-vars","'SkillCard' is defined but never used.","Identifier","unusedVar","'FormTextbox' is defined but never used.","'response' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'CancelButton' is defined but never used."]